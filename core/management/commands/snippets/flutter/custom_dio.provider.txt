import 'dart:io';

import 'package:dio/dio.dart';
import 'package:get_it/get_it.dart';
import 'package:dio/native_imp.dart';

import 'config.dart';
import 'process.controller.dart';

class CustomDio extends DioForNative {
  String _url;

  CustomDio(String url, [BaseOptions options]) : super(options) {
    // Adicionando os interceptors
    interceptors.add(CustomDioInterceptor());
    _url = "${Config.uri}$url";
  }

  // Método para construir a Autenticação no cabeçalho
  Map<String, String> makeHeadersAuthentication(
      {String token, String contentType = "application/json; charset=utf-8"}) {
    Map<String, String> headersMap;
    try {
      headersMap = {
        'Content-Type': contentType,
        // 'Authorization': 'Bearer ' + token ?? Config.DRFToken,
      };
    } catch (e) {
      
    }
    this.options.headers = headersMap;
    return headersMap;
  }

  Future<dynamic> getHttp({String uri}) async {
    _url = uri ?? _url;
    try {
      Response _response = await this.get(this._url);
      if (_response.statusCode == 200) {
        return _response.data;
      }
      return null;
    } on DioError catch (error) {}
  }

  Future<dynamic> postHttp(data, {String uri}) async {
    _url = uri ?? _url;
    try {
      Response _response = await this.post(_url, data: data);
      if (_response.statusCode == 200  || _response.statusCode == 200) {
        return _response.data;
      }
      return null;
    } on DioError catch (error) {}
  }

  Future<dynamic> putHttp(data, String id, {String uri}) async {
    _url = uri ?? _url;
    try {
      Response _response = await this.put(_url, data: data);
      if (_response.statusCode == 200) {
        return _response.data;
      }
      return null;
    } on DioError catch (error) {}
  }

  Future<dynamic> patchHttp(data, {String uri}) async {
    _url = uri ?? _url;
    try {
      Response _response = await this.put(_url, data: data);
      if (_response.statusCode == 200) {
        return _response.data;
      }
      return null;
    } on DioError catch (error) {}
  }

  Future<dynamic> deleteHttp(data, String id, {String uri}) async {
    _url = uri ?? _url;
    try {
      Response _response = await this.delete(_url, data: data);
      if (_response.statusCode == 200) {
        return _response.data;
      }
      return null;
    } on DioError catch (error) {}
  }
}

class CustomDioInterceptor extends InterceptorsWrapper {
  ProcessController _processController = GetIt.I.get<ProcessController>();

  @override
  Future onRequest(RequestOptions options) {
    options.headers = {'Content-Type': 'application/json'};
    options.connectTimeout = 50000;
    options.receiveTimeout = 50000;
    return super.onRequest(options);
  }

  @override
  Future onResponse(Response response) {
    Process.finishSuccess(
      response.statusMessage,
      status: response.statusCode,
    );
    return super.onResponse(response);
  }

  @override
  Future onError(DioError err) {
    Process.finishError(err.message, err.response.data.toString(),
        status: err.response.statusCode,
        data: err.request.data.toString(),
        header: err.request.headers.toString(),
        request: err.request.data.toString(),
        dioError: true);
    return super.onError(err);
  }
}
