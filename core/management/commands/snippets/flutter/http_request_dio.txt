import 'dart:io';
import 'config.dart';
import 'package:dio/dio.dart';
import 'process.controller.dart';
import 'package:get_it/get_it.dart';

class HttpRequestDio {
  Dio _dio;
  String _url;

  HttpRequestDio(String url, {String authenticationToken, String errorMessage}) {
    _url = url;
    _dio = Dio();
    _dio.options.connectTimeout = 50000;
    _dio.options.receiveTimeout = 50000;
    _dio.options.headers = {
      HttpHeaders.contentTypeHeader: "application/json",
      HttpHeaders.authorizationHeader: " ${authenticationToken ?? Config.DRFToken}"
    };
  }

  // Instanciando o ProcessController
  ProcessController _processController = GetIt.I.get<ProcessController>();

  Future<dynamic> getHttp() async {
    try {
      Response _response = await _dio.get(_url);
      if (_response.statusCode == 200) {
        _success(_response);
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
        _error(error.message, error.response);
    }
  }

  Future<dynamic> postHttp(data) async {
    try {
      Response _response = await _dio.post(_url, data: data);
      if (_response.statusCode == 201) {
        _success(_response);
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
        _error(error.message, error.response);
    }
  }

  Future<dynamic> putHttp(data, String id) async {
    try {
      Response _response = await _dio.put(_url, data: data);
      if (_response.statusCode == 200) {
        _success(_response);
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
        _error(error.message, error.response);
    }
  }

  Future<dynamic> deleteHttp(data, String id) async {
    try {
      Response _response = await _dio.delete(_url, data: data);
      if (_response.statusCode == 200) {
        _success(_response);
        return _response.data;
      }
      return null;
    } on DioError catch (error) {
        _error(error.message, error.response);
    }
  }

  /// Métodos para tratar o retorno da requisição HTTP
  void _success(Response response) async {
    try {
      _processController.withSuccess(
        statusCode: response.statusCode,
        message: response.statusMessage,
        httpData: response.data.toString(),
        httpHeader: response.headers.toString(),
      );
    } catch (e) {
      DebugPrint.imprimir("Ocorreu um erro no método error: $e");
    }
  }

  void _error(String message, Response response) async {
    try {
      _processController.withError(
        message: message,
        statusCode: response.statusCode,
        httpData: response.data.toString(),
        httpHeader: response.headers.toString(),
      );
    } catch (e) {
      DebugPrint.imprimir("Ocorreu um erro no método error: $e");
    }
  }

}