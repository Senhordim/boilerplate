/// Controller do gerenciamento de erro da aplicação
///
///    O CÓDIGO DO ARQUIVO controller.g.dart NUNCA DEVE SER ALTERADO MANUALMENTE.
///    Quando for alterado algo no arquivo controller.dart deve ser executado o comando:
///      flutter pub run build_runner build
///
/// Após a execução do comando acima o arquivo controller.g.dart terá sido atualizado
/// com as novas features.
///
/// [Esse arquivo não deve ser alterado]

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:mobx/mobx.dart';

part 'error.controller.g.dart';

class ErrorController = _ErrorControllerBase with _$ErrorController;

abstract class _ErrorControllerBase with Store {
  // Declarando os atributos do controller
  // Atributo boleano que determina se a requisição HTTP ocorreu corretamente
  @observable
  bool httpSuccess = true;

  // Atributo int com o código de retorno da requisição HTTP
  int httpStatusCode = 0;

  // Atributo String com a mensagem de retorno da requisição HTTP
  String httpMessage = '';
  
  // Atributo String com o head da requisição HTTP
  String httpHeader = '';
  
  // Atributo String com o data da requisição HTTP
  String httpData = '';

  // Declarando a Action para setar sucesso no request
  @action
  setSuccess() async => this.httpSuccess = true;
  
  // Declarando a Action para setar erro no request
  @action
  setError() async => this.httpSuccess = true;
  
  // Declarando a Action para setar se retorno com sucesso ou error
  @action
  statusCode(int statusCode) async => this.httpStatusCode = statusCode;
  
  // Declarando a Action para setar a mensagem de retorno
  @action
  message(String content) async => this.httpMessage = content;
  
  // Declarando a Action para setar o header em formato String da 
  @action
  header(String content) async => this.httpHeader = content;
  
  // Declarando a Action para setar o data em formato String da 
  @action
  data(String content) async => this.httpData = content;

  /// Área para sobrescrever métodos
  // Sobrescrevendo o toString
  @override
  String toString() {
    return "ErrorController:\nSucesso -> ${this.httpSuccess.toString()}\nStatusCode -> ${this.httpStatusCode.toString()}\nMessage -> ${this.httpMessage.toString()}\nData -> ${this.httpData.toString()}\nHeader -> ${this.httpHeader}";
  }

  /// Área para os Actions/Metodos
  // Declarando a Action para setar o sucesso do request
  @action
  success(String message, int statusCode, {String data, String header}){
    this.httpSuccess = true;
    this.httpMessage = message;
    this.httpStatusCode = statusCode;
    this.httpData = data != null? data: null;
    this.httpHeader = header != null? header: null;
  }
  
  // Declarando a Action para setar o erro do request
  @action
  error(String message, int statusCode, {String data, String header}){
    this.httpSuccess = false;
    this.httpMessage = message;
    this.httpStatusCode = statusCode;
    this.httpData = data != null? data: null;
    this.httpHeader = header != null? header: null;
  }
}
