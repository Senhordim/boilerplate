/// Página inicial da APP.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'utils/config.dart';
import 'user_interface/font.dart';
import 'user_interface/widget.dart';
import 'package:get_it/get_it.dart';
import 'package:flutter/material.dart';
import 'package:flutter_mobx/flutter_mobx.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';

$ImportPages$
$ImportController$

void main() {
    /// Criando uma instância do Get_it para trabalhar
    /// com injeção de dependência
    GetIt getIt = GetIt.instance;

    /// Registrando os controllers dos Models utiliznado o getIt
    $RegisterControllers$

    runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    // Recuperando o controller SettingsController
    SettingsController _controller = GetIt.I<SettingsController>();

    return Observer(builder: (_) {
      return MaterialApp(
        title: '${Config.app_title}',
        theme: _controller.lightTheme == true
            ? CustomTheme.lightTheme
            : CustomTheme.darkTheme,
        home: MyHomePage(title: '${Config.app_title}'),
        debugShowCheckedModeBanner: false,
      );
    });
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);
  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

/// Caso deseje ativar a navegação pela barra inferior BottomNavigationBar deve-se setar a 
/// variável [bottomNavigationEnable], depois criar as páginas que serão invocadas quando o usuário
/// clicar nos elementos e vinculas à lista de páginas disponíveis conforme exemplo  seguir
/// 
///     _pages = [PaginaUm(), PaginaDois(), PaginaTres(), ..., PaginaN()]
/// 
/// lembre-se que a quantidade de páginas deve ser igual à quantidade de filhos do parâmetro
/// items do BottomNavigationBar, também é necessário alterar o valor passado para o body, que 
/// que deve ser _currentPage.
/// 
class _MyHomePageState extends State<MyHomePage> {
  // Recuperando o controller SettingsController
  SettingsController _controller = GetIt.I<SettingsController>();
  
  // Declarando o booleano que controla se será mostrado o ButtonNavigationBar
  bool bottomNavigationEnable = false;

    // Declarando o PageController para navegação pelo ButtonNavigationBar
  PageController _pageController;

  // Declarando o inteiro para controlar qual página deve ser exibida
  int _page = 0;

  // Declarando a lista de Widgets que devem conter as páginas no caso de ser configurada
  // navegação por meu do bottomNavigationBar
  List<Widget> _pages;

  /// Declarando o Widget da página atual para o caso de ser configurado a navegação 
  /// por meio do ButtonNavigationBar
  Widget _currentPage;

  /// Sobrescrevendo o initState para caso seja configurada a navegação 
  /// pelo ButtonNavigationBar sejam instânciadas as variáveis de controle
  /// da navegação.
  @override
  void initState(){
    /// Iniciando a lista de Widgets com as páginas da navegação via ButtonNavigationBar
    // _pages = [];
    // _currentPage = _pages[_page];
  }

  @override
  Widget build(BuildContext context) {
    // Verificando se a navegação será pelo navigationButton
      return Scaffold(
        appBar: AppBar(
          title: customAppBarTitle(
            context, 
            widget.title,
          ),
          actions: _buildAction(context),
        ),
        body: _buildGridView(context),
        bottomNavigationBar: _buildBottomNavigationBar(context)
      );
  }

  /// Widget para criar as ações da AppBar
  List<Widget> _buildAction(BuildContext context){
    return [
      IconButton(
        icon: Icon(Icons.settings),
        tooltip: 'Configurações',
        onPressed: () {
          Navigator.push(
            context, 
            MaterialPageRoute(builder: (_) => SettingsIndexPage()),
          );
        }),
    ];
  }

  /// Widget para criar o GridView contendo os Cards de acesso rápido
  Widget _buildGridView(context) {
    return Container(
      child: Padding(
        padding: const EdgeInsets.all(4.0),
        child: GridView.count(
          crossAxisCount: 2,
          children: List.generate(Itens.list.length, (index) {
            return Center(
              child: GestureDetector(
                onTap: () {
                  Navigator.push(context, 
                    MaterialPageRoute(
                      builder: (context) =>
                        Itens.list[index].geturi(),
                      ),
                    );
                },
                child: customMainCardButton(
                  Itens.list[index].icon,
                  Itens.list[index].title,
                  iconColor: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightIconColor
                      : CustomTheme.mainCardDarkIconColor,
                  textColor: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightTextColor
                      : CustomTheme.mainCardDarkTextColor,
                  cardBackgroundColorBegin: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightBackgroundColor
                      : CustomTheme.mainCardDarkBackgroundColor,
                  cardBackgroundColorEnd: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightBackgroundColor
                      : CustomTheme.mainCardDarkBackgroundColor,
                  boxShadowColor: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightShadowColor
                      : CustomTheme.mainCardDarkShadowColor,
                  cardBorderColor: _controller.lightTheme == true
                      ? CustomTheme.mainCardLightBackgroundColor
                      : CustomTheme.mainCardDarkBackgroundColor,
                ),
              ),
            );
          }),
        ),
      ),
    );
  }

  /// Widget para criar o BottomNavigationBar. Caso o valor do bottomNavigationEnable
  /// seja false é retornado um null para não "desenhar" nada na tela.
  Widget _buildBottomNavigationBar(BuildContext context) {
    if (bottomNavigationEnable == false) return null;
    return Theme(
      data: Theme.of(context).copyWith(
        // sets the background color of the `BottomNavigationBar`
        canvasColor: Theme.of(context).primaryColor,
        // sets the active color of the `BottomNavigationBar` if `Brightness` is light
        primaryColor: Theme.of(context).accentColor,
        textTheme: Theme.of(context).textTheme.copyWith(
              caption: TextStyle(color: Colors.grey[500]),
            ),
      ),
      child: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        items: <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(
              Icons.home,
            ),
            title: Container(height: 0.0),
          ),
          BottomNavigationBarItem(
            icon: Icon(
              Icons.favorite,
            ),
            title: Container(height: 0.0),
          ),
          BottomNavigationBarItem(
            icon: Icon(
              Icons.supervised_user_circle,
            ),
            title: Container(height: 0.0),
          ),
          BottomNavigationBarItem(
            icon: Icon(
              Icons.grid_on,
            ),
            title: Container(height: 0.0),
          ),
        ],
        onTap: _navigationTapped,
        currentIndex: _page,
      ),
    );
  }

  /// Método para controlar a navegação das páginas
  /// conforme o clique nos elementos do ButtonNavigationBar
  _navigationTapped(int page) {
    setState((){
      _page = page;
      _currentPage = _pages[_page];
    });
  }
}

/// Classe dos itens do ListView
class Itens{
  final String title;
  final IconData icon;
  final Widget uri;

  Itens({
    this.title,
    this.icon,
    this.uri,
  });

    static List<Itens> list = <Itens> [$ListPages$];

    Widget geturi() => this.uri;
}